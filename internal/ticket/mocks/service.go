// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ticket/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ticket "github.com/dilaragorum/ticket-api/internal/ticket"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTicketOption mocks base method.
func (m *MockService) CreateTicketOption(ctx context.Context, name, description string, allocation int) (*ticket.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketOption", ctx, name, description, allocation)
	ret0, _ := ret[0].(*ticket.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketOption indicates an expected call of CreateTicketOption.
func (mr *MockServiceMockRecorder) CreateTicketOption(ctx, name, description, allocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketOption", reflect.TypeOf((*MockService)(nil).CreateTicketOption), ctx, name, description, allocation)
}

// GetTicket mocks base method.
func (m *MockService) GetTicket(ctx context.Context, id int) (*ticket.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", ctx, id)
	ret0, _ := ret[0].(*ticket.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockServiceMockRecorder) GetTicket(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockService)(nil).GetTicket), ctx, id)
}

// PurchaseFromTicketOption mocks base method.
func (m *MockService) PurchaseFromTicketOption(ctx context.Context, id, quantity int, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseFromTicketOption", ctx, id, quantity, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurchaseFromTicketOption indicates an expected call of PurchaseFromTicketOption.
func (mr *MockServiceMockRecorder) PurchaseFromTicketOption(ctx, id, quantity, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseFromTicketOption", reflect.TypeOf((*MockService)(nil).PurchaseFromTicketOption), ctx, id, quantity, userID)
}
